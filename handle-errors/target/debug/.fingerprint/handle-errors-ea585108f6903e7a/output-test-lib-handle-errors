{"message":"expected unit struct, unit variant or constant, found tuple variant `crate::WarpError::DatabaseQueryError`","code":{"code":"E0532","explanation":"Pattern arm did not match expected kind.\n\nErroneous code example:\n\n```compile_fail,E0532\nenum State {\n    Succeeded,\n    Failed(String),\n}\n\nfn print_on_failure(state: &State) {\n    match *state {\n        // error: expected unit struct, unit variant or constant, found tuple\n        //        variant `State::Failed`\n        State::Failed => println!(\"Failed\"),\n        _ => ()\n    }\n}\n```\n\nTo fix this error, ensure the match arm kind is the same as the expression\nmatched.\n\nFixed example:\n\n```\nenum State {\n    Succeeded,\n    Failed(String),\n}\n\nfn print_on_failure(state: &State) {\n    match *state {\n        State::Failed(ref msg) => println!(\"Failed with {}\", msg),\n        _ => ()\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":432,"byte_end":463,"line_start":16,"line_end":16,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    DatabaseQueryError(sqlx::Error),","highlight_start":5,"highlight_end":36}],"label":"`crate::WarpError::DatabaseQueryError` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1777,"byte_end":1813,"line_start":46,"line_end":46,"column_start":17,"column_end":53,"is_primary":true,"text":[{"text":"    if let Some(crate::WarpError::DatabaseQueryError) = r.find() {","highlight_start":17,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use the tuple variant pattern syntax instead","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1777,"byte_end":1813,"line_start":46,"line_end":46,"column_start":17,"column_end":53,"is_primary":true,"text":[{"text":"    if let Some(crate::WarpError::DatabaseQueryError) = r.find() {","highlight_start":17,"highlight_end":53}],"label":null,"suggested_replacement":"crate::WarpError::DatabaseQueryError(_)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0532]\u001b[0m\u001b[0m\u001b[1m: expected unit struct, unit variant or constant, found tuple variant `crate::WarpError::DatabaseQueryError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:46:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DatabaseQueryError(sqlx::Error),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m`crate::WarpError::DatabaseQueryError` defined here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Some(crate::WarpError::DatabaseQueryError) = r.find() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: use the tuple variant pattern syntax instead: `crate::WarpError::DatabaseQueryError(_)`\u001b[0m\n\n"}
{"message":"`fn({type error}) -> WarpError {WarpError::DatabaseQueryError}` doesn't implement `std::fmt::Display`","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1955,"byte_end":1964,"line_start":48,"line_end":48,"column_start":74,"column_end":83,"is_primary":true,"text":[{"text":"        Ok(warp::reply::with_status(crate::WarpError::DatabaseQueryError.to_string(),StatusCode::UNPROCESSABLE_ENTITY))","highlight_start":74,"highlight_end":83}],"label":"`fn({type error}) -> WarpError {WarpError::DatabaseQueryError}` cannot be formatted with the default formatter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following trait bounds were not satisfied:\n`fn({type error}) -> WarpError {WarpError::DatabaseQueryError}: std::fmt::Display`\nwhich is required by `fn({type error}) -> WarpError {WarpError::DatabaseQueryError}: ToString`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"use parentheses to construct this tuple variant","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1954,"byte_end":1954,"line_start":48,"line_end":48,"column_start":73,"column_end":73,"is_primary":true,"text":[{"text":"        Ok(warp::reply::with_status(crate::WarpError::DatabaseQueryError.to_string(),StatusCode::UNPROCESSABLE_ENTITY))","highlight_start":73,"highlight_end":73}],"label":null,"suggested_replacement":"(/* value */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: `fn({type error}) -> WarpError {WarpError::DatabaseQueryError}` doesn't implement `std::fmt::Display`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:48:74\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(warp::reply::with_status(crate::WarpError::DatabaseQueryError.to_string(),StatusCode::UNPROCESSABLE_ENTITY))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`fn({type error}) -> WarpError {WarpError::DatabaseQueryError}` cannot be formatted with the default formatter\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the following trait bounds were not satisfied:\u001b[0m\n\u001b[0m           `fn({type error}) -> WarpError {WarpError::DatabaseQueryError}: std::fmt::Display`\u001b[0m\n\u001b[0m           which is required by `fn({type error}) -> WarpError {WarpError::DatabaseQueryError}: ToString`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use parentheses to construct this tuple variant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        Ok(warp::reply::with_status(crate::WarpError::DatabaseQueryError\u001b[0m\u001b[0m\u001b[38;5;10m(/* value */)\u001b[0m\u001b[0m.to_string(),StatusCode::UNPROCESSABLE_ENTITY))\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++\u001b[0m\n\n"}
{"message":"expected unit struct, unit variant or constant, found tuple variant `Self::DatabaseQueryError`","code":{"code":"E0533","explanation":"An item which isn't a unit struct, a variant, nor a constant has been used as a\nmatch pattern.\n\nErroneous code example:\n\n```compile_fail,E0533\nstruct Tortoise;\n\nimpl Tortoise {\n    fn turtle(&self) -> u32 { 0 }\n}\n\nmatch 0u32 {\n    Tortoise::turtle => {} // Error!\n    _ => {}\n}\nif let Tortoise::turtle = 0u32 {} // Same error!\n```\n\nIf you want to match against a value returned by a method, you need to bind the\nvalue first:\n\n```\nstruct Tortoise;\n\nimpl Tortoise {\n    fn turtle(&self) -> u32 { 0 }\n}\n\nmatch 0u32 {\n    x if x == Tortoise.turtle() => {} // Bound into `x` then we compare it!\n    _ => {}\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1161,"byte_end":1185,"line_start":31,"line_end":31,"column_start":13,"column_end":37,"is_primary":true,"text":[{"text":"            Self::DatabaseQueryError => write!(f, \"Cannot update, invalid Data.\") ,","highlight_start":13,"highlight_end":37}],"label":"not a unit struct, unit variant or constant","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0533]\u001b[0m\u001b[0m\u001b[1m: expected unit struct, unit variant or constant, found tuple variant `Self::DatabaseQueryError`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:31:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Self::DatabaseQueryError => write!(f, \"Cannot update, invalid Data.\") ,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot a unit struct, unit variant or constant\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `sqlx`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":451,"byte_end":455,"line_start":16,"line_end":16,"column_start":24,"column_end":28,"is_primary":true,"text":[{"text":"    DatabaseQueryError(sqlx::Error),","highlight_start":24,"highlight_end":28}],"label":"use of undeclared crate or module `sqlx`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `sqlx`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:16:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DatabaseQueryError(sqlx::Error),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `sqlx`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0433, E0532, E0533, E0599.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0433, E0532, E0533, E0599.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0433`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0433`.\u001b[0m\n"}
